---
import DualScreenFilled from '@components/icons/DualScreenFilled.astro'
import DualScreenRegular from '@components/icons/DualScreenRegular.astro'
import SettingsFilled from '@components/icons/SettingsFilled.astro'
import Message from './Message.astro'
import ChatPaused from './ChatPaused.astro'
import type { Vod } from '@lib/types'
export interface Props {
  chatId: string
  channel: string
  platform: Vod['platform']
}
const { channel, chatId, platform } = Astro.props
---

<div class="bg-white dark:bg-white/5 theBorder border-t-[0px] lg:border-t-[1px] rounded-lg group-[.theater]:rounded-none group-[.theater]:border-[0px] w-full lg:max-w-[450px] h-full items-start relative">
  <div class="bg-white dark:bg-black h-[45px] flex justify-between w-full absolute z-10 px-2">
    <button id="toggle-theater">
      <DualScreenFilled class="hidden size-7 group-[.theater]:block" />
      <DualScreenRegular class="size-7 group-[.theater]:hidden" />
    </button>
    <button id="settings">
      <SettingsFilled class="size-7" />
    </button>
  </div>
  <div class="relative h-full">
    <div class="messages h-full">
      <div data-chat-id={chatId} data-channel={channel} data-platform={platform} id="chat-box" class="messages-content">
        <template>
          <Message />
        </template>
      </div>
    </div>
    <ChatPaused />
  </div>
</div>
<script>
  import { toggleTheater } from '@lib/vodUtils'
  import { isCuid } from '@lib/cuid'
  import { type ChatMessage } from '@lib/ChatTypes'
  import * as compressJSON from 'compress-json'
  // @ts-ignore
  import pako from 'pako'
  import type { Vod, Badges, Emotes, Channel } from '@lib/types'
  import { handlerChatScroll, loadBadges, loadThirdPartyEmotes, createMessagePrinter, getMessageIndexByTime } from '@lib/chatUtils'
  const MAX_MESSAGES = 150
  let messages: ChatMessage[] = []
  let lastTime = 0,
    startWin = 0,
    winSize = 10
  document.querySelector('#toggle-theater')?.addEventListener('click', toggleTheater)
  document.querySelector('.messages')?.addEventListener('scroll', handlerChatScroll)

  const chatBox = document.querySelector('#chat-box') as HTMLDivElement
  const { channel, chatId, platform } = chatBox.dataset as { chatId?: string; channel?: string; platform?: Vod['platform'] }
  const isUsingCuid = isCuid(chatId || '')
  const messageTemplate = chatBox.querySelector('template')
  let customEmotes: Emotes = new Map()
  let badges: Badges = new Map()

  async function fetchChannel(channel: string) {
    const res = await fetch(`https://api.zvods.com/api/v1/channel/${channel}`)
    return (await res.json()) as { code: String | 'success' | 'not_found'; message?: string; data?: Channel }
  }
  async function loadChannelData() {
    const { data } = await fetchChannel(channel || '')
    const channelId = data?.channelId
    window.channel = data
    if (window?.loadChannelData && data) window.loadChannelData(data)
    if (channelId && platform) {
      loadBadges(platform, channelId, (badgesLoaded) => {
        badges = badgesLoaded
      })
      loadThirdPartyEmotes(platform, channelId, (emotesLoaded) => {
        emotesLoaded.forEach((emote) => {
          customEmotes.set(emote.alt, emote)
        })
      })
    }
  }

  async function fetchChat() {
    try {
      const req = await fetch(`https://api.zvods.com/api/v1/chat?id=${chatId}&platform=${platform}&channel=${channel}`)
      if (req.status === 200) {
        if (!isUsingCuid) {
          const data = await req.json()
          messages = compressJSON.decompress(data) as ChatMessage[]
          return
        }
        const compressedData = await req.arrayBuffer()
        const decompressedData = pako.inflate(new Uint8Array(compressedData), { to: 'string' })
        messages = JSON.parse(decompressedData)
        window.messages = JSON.parse(decompressedData)
      }
      console.log(messages)
      console.log(`${messages.length} Messages loaded`)
    } catch (e) {}
  }

  fetchChat()
  loadChannelData()

  let chatDelayDiff = 0
  const printMessage = createMessagePrinter({
    chatBox,
    MAX_MESSAGES,
    messageTemplate,
  })
  window.onProgress = (progress) => {
    let time = progress.playedSeconds
    if (Math.abs(time - lastTime) >= 1) {
      startWin = getMessageIndexByTime(messages, time)
    }
    lastTime = time
    time = chatDelayDiff + time
    for (let i = startWin; i <= startWin + winSize; i++) {
      const message = messages[i]
      if (message?.tms <= time && !document.getElementById(message.id)) {
        startWin += 1
        printMessage(message, badges, customEmotes)
      }
    }
  }
</script>
<style>
  .messages {
    overflow: auto;
    display: flex;
    flex-direction: column-reverse;
    overflow-anchor: auto !important;
  }

  .messages .messages-content .message {
    transform: translateZ(0); /* fixes a bug in Safari iOS where the scroller doesn't update */
  }
</style>

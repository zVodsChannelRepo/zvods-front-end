---
import VodCard from '@components/homevods/VodCard.astro'
import RecommendedVodsLoading from './RecommendedVodsLoading.astro'
export interface Props {
  channel: string
}

const { channel } = Astro.props
---

<div data-channel={channel} id="vod-list" class="grid w-full gap-6 max-w-full lg:max-w-[450px] grid-cols-1 lg:ml-6">
  <template id="vod-template">
    <VodCard />
  </template>
  <template id="loading-template">
    <RecommendedVodsLoading />
  </template>
</div>

<script>
  import type { Vod } from '@lib/types'
  import { vodsExported } from '@lib/utils/vods'
  import { getLangFromUrl, relativeLink } from '@lib/i18n/utils'
  import InfiniteScroll from '@lib/infiniteScroll'
  import formatTimeAgo from '@lib/utils/formatTimeAgo'
  const formatter = new Intl.RelativeTimeFormat(getLangFromUrl({ ...location }), { numeric: 'auto' })
  const channelRoute = document.getElementById('vod-list')!.dataset.channel
  document.addEventListener('DOMContentLoaded', () => {
    new InfiniteScroll<Vod, { cursor?: string }>({
      box: 'vod-list',
      templateBox: 'vod-template',
      fetchItems(page, lres, setRes) {
        return new Promise((resolve) => {
          console.log({ lres })
          if (page === 10) {
            setRes({ cursor: undefined })
            return resolve([])
          }
          setTimeout(() => {
            const vods = vodsExported.filter((channel) => channel.channel === channelRoute)
            const items = Array.from({ length: 10 }, (_, i) => ({
              ...vods[Math.floor(Math.random() * vods.length)],
            })) satisfies Vod[]
            setRes({ cursor: btoa(String(page)) })
            resolve(items)
          }, 1000)
        })
      },
      loadingPlaceholder: 'loading-template',
      loadingPlaceholderCount: 12,
      itemConfigurator(item, element) {
        element.querySelectorAll('.vod-link').forEach((el) => ((el as HTMLAnchorElement).href = relativeLink(`/watch/${item.vodId}`, window.location)))
        ;(element.querySelector('.vod-title') as HTMLElement).textContent = item.title
        ;(element.querySelector('.vod-date') as HTMLElement).textContent = formatTimeAgo(item.date, formatter) || ''
        ;(element.querySelector('.vod-thumbnail') as HTMLImageElement).src = `https://i.ytimg.com/vi_webp/${item.vodId.split(',')[0]}/hqdefault.webp`
        const vodChannel = element.querySelector('.vod-channel') as HTMLAnchorElement
        vodChannel.textContent = item.channel
        element.querySelectorAll('.vod-channel-link').forEach((el) => ((el as HTMLAnchorElement).href = relativeLink(`/${item.channel}`, window.location)))
      },
    })
  })
</script>
